{
	"info": {
		"_postman_id": "6608d3fc-e9f3-46f8-a049-7d6f4fdef8b5",
		"name": "Basic OpenSocioracy Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27760",
		"_collection_link": "https://ultrinet.postman.co/workspace/OpenSociocracy~91847678-48b8-4506-a363-e2ef05526962/collection/27760-6608d3fc-e9f3-46f8-a049-7d6f4fdef8b5?action=share&creator=27760&source=collection_link"
	},
	"item": [
		{
			"name": "Server Connectivity",
			"item": [
				{
					"name": "API Server up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The root of the API server is available\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.root).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUri}}",
							"host": [
								"{{apiUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "API Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The root of the API server is available\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"up\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUri}}/health",
							"host": [
								"{{apiUri}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "API Postgres Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The root of the API server is available\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUri}}/health/postgres",
							"host": [
								"{{apiUri}}"
							],
							"path": [
								"health",
								"postgres"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "API Auth - Request Signup code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Returned status is OK\", function () {",
									"    jsonData.status == \"OK\"",
									"});",
									"",
									"// Set variables for deviceId and preAuthSessionId so we can use them when submitting the code",
									"",
									"pm.environment.set(\"deviceId_1\", jsonData.deviceId);",
									"pm.environment.set(\"preAuthSessionId_1\", jsonData.preAuthSessionId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randoEmail\", pm.variables.replaceIn('{{$randomExampleEmail}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "rid",
								"value": "passwordless",
								"type": "text"
							},
							{
								"key": "st-auth-mode",
								"value": "cookie",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{randoEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUri}}/auth/signinup/code",
							"host": [
								"{{apiUri}}"
							],
							"path": [
								"auth",
								"signinup",
								"code"
							]
						}
					},
					"response": []
				},
				{
					"name": "API Auth - Renew Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Returned status is OK\", function () {",
									"    jsonData.status == \"OK\"",
									"});",
									"",
									"// Set variables for deviceId and preAuthSessionId so we can use them when submitting the code",
									"",
									"pm.environment.set(\"deviceId_1\", jsonData.deviceId);",
									"pm.environment.set(\"preAuthSessionId_1\", jsonData.preAuthSessionId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "rid",
								"value": "passwordless",
								"type": "text"
							},
							{
								"key": "st-auth-mode",
								"value": "cookie",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{randoEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUri}}/auth/signinup/code",
							"host": [
								"{{apiUri}}"
							],
							"path": [
								"auth",
								"signinup",
								"code"
							]
						}
					},
					"response": []
				},
				{
					"name": "API Auth - Submit OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Returned status is OK\", function () {",
									"    jsonData.status == \"OK\"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randoEmail\", pm.variables.replaceIn('{{$randomExampleEmail}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "rid",
								"value": "passwordless",
								"type": "text"
							},
							{
								"key": "st-auth-mode",
								"value": "cookie",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"deviceId\": \"{{deviceId_1}}\",\n    \"preAuthSessionId\": \"{{preAuthSessionId_1}}\",\n    \"userInputCode\": \"466759\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUri}}/auth/signinup/code/consume",
							"host": [
								"{{apiUri}}"
							],
							"path": [
								"auth",
								"signinup",
								"code",
								"consume"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BASIC FLOW",
			"item": [
				{
					"name": "ACCOUNTS",
					"item": [
						{
							"name": "Get member accounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const accounts = jsonData.accounts;",
											"",
											"_.forEach(accounts, function(account) {",
											"  if(account.personal == false) {",
											"    pm.environment.set(\"currentAccount\", account.accountUid);",
											"  }",
											"    if(account.personal) {",
											"        pm.test(\"Personal account found\", function () {",
											"            pm.expect(account.personal).to.be.true;",
											"        });",
											"    }",
											"",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/accounts",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"currentAccount\", jsonData.uid);",
											"",
											"pm.test(\"UUID found\", function () {",
											"    pm.expect(jsonData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Returned status is OK\", function () {",
											"    jsonData.status == \"OK\"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"randAcctName\", 'ACCT ' + pm.variables.replaceIn('{{$randomCompanyName}}'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{randAcctName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/accounts",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for new account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"const accounts = jsonData.accounts;",
											"",
											"pm.test(\"More than one account found\", function () {",
											"    pm.expect(accounts.length).to.be.greaterThan(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/accounts",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"accounts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ORGANIZATIONS",
					"item": [
						{
							"name": "Get Account orgs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"const orgs = jsonData.orgs;",
											"",
											"_.forEach(orgs, function(org) {",
											"    pm.environment.set(\"orgUid\", org.orgUid);",
											"});",
											"",
											"pm.test(\"No orgs found yet, as expected\", function () {",
											"    pm.expect(orgs.length).to.be.eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{apiUri}}/orgs/account/{{currentAccount}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"orgs",
										"account",
										"{{currentAccount}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Org",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.environment.set(\"orgUid\", jsonData.orgUid);",
											"pm.environment.set(\"logbookUid\", jsonData.logbookUid);",
											"",
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is valid shape\", function () {",
											"    pm.expect(jsonData.orgUid).to.exist;",
											"    pm.expect(jsonData.name).to.exist;",
											"    pm.expect(jsonData.createdAt).to.exist;",
											"    pm.expect(jsonData.logbookUid).to.exist;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"randOrgName\", pm.variables.replaceIn('{{$randomCompanyName}}'));",
											"pm.environment.set(\"randOrgBlurb\", pm.variables.replaceIn('{{$randomBs}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{randOrgName}}\",\n    \"note\": \"{{randOrgBlurb}}\",\n    \"accountUid\": \"{{currentAccount}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/orgs",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"orgs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for new Org",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const orgs = jsonData.orgs;",
											"",
											"_.forEach(orgs, function(org) {",
											"    pm.environment.set(\"orgUid\", org.orgUid);",
											"});",
											"",
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"pm.test(\"No orgs found yet, as expected\", function () {",
											"    pm.expect(orgs.length).to.be.gt(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{apiUri}}/orgs/account/{{currentAccount}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"orgs",
										"account",
										"{{currentAccount}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LOGBOOK",
					"item": [
						{
							"name": "Get Org Logbooks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const logbooks = jsonData.logbooks;",
											"",
											"pm.test(\"One or more logbook found\", function () {",
											"    pm.expect(logbooks.length).to.be.greaterThan(0);",
											"});",
											"",
											"",
											"_.forEach(logbooks, function(logbook) {",
											"    pm.environment.set(\"logbookUid\", logbook.logbookUid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{apiUri}}/logbooks/org/{{orgUid}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"logbooks",
										"org",
										"{{orgUid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Logbook entries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const logbookEntries = jsonData.logbookEntries;",
											"",
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"One or more logbook entry found\", function () {",
											"    pm.expect(logbookEntries.length).to.be.greaterThan(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{randoEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/logbooks/{{logbookUid}}/entries",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"logbooks",
										"{{logbookUid}}",
										"entries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Logbook note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"note\": \"This org event happened\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/logbooks/{{logbookUid}}/entries",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"logbooks",
										"{{logbookUid}}",
										"entries"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LOGBOOK NUGGETS",
					"item": [
						{
							"name": "Create a Logbook Nugget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Has proper fields\", function () {",
											"  ",
											"    pm.expect(jsonData.logbookEntryUid).to.exist;",
											"    pm.expect(jsonData.createdAt).to.exist;",
											"    pm.expect(jsonData.nuggetUid).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"note\": \"This org event happened, and I have a nugget of info\",\n    \"nugget\": {\n        \"nuggetType\": \"proposal\",\n        \"pubAt\": \"2023-05-25\",\n        \"internalName\": \"Proposal to recover the parking lot with a lot.\",\n        \"publicTitle\": \"Prettier Parking Lot\",\n        \"blocks\": [\n            {\n                \"blockType\": \"standardProposal\",\n                \"data\": {\n\n                }\n            },\n            {\n                \"blockType\": \"slideDeck\",\n                \"data\": {\n                    \n                }\n            },\n            {\n                \"blockType\": \"spreadsheet\",\n                \"data\": {\n                    \n                }\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/logbooks/{{logbookUid}}/entries",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"logbooks",
										"{{logbookUid}}",
										"entries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Logbook Entry Nugget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{apiUri}}/logbooks/{{logbookUid}}/entries/{{nuggetUid}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"logbooks",
										"{{logbookUid}}",
										"entries",
										"{{nuggetUid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Logbook Nugget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"note\": \"This org event happened, and I have a nugget of info\",\n    \"nugget\": {\n        \"nuggetType\": \"proposal\",\n        \"pubAt\": \"2023-05-25\",\n        \"internalName\": \"Proposal to recover the parking lot.\",\n        \"publicTitle\": \"Prettier Parking\",\n        \"blocks\": [\n            {\n                \"blockType\": \"standardProposal\",\n                \"data\": {\n\n                }\n            },\n            {\n                \"blockType\": \"slideDeck\",\n                \"data\": {\n                    \n                }\n            },\n            {\n                \"blockType\": \"spreadsheet\",\n                \"data\": {\n                    \n                }\n            }\n        ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/nugget/{{nuggetUid}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"nugget",
										"{{nuggetUid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "NUGGET COMMENTS",
					"item": [
						{
							"name": "Get Comments for a Nugget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{apiUri}}/comments/nugget/{{nuggetUid}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"comments",
										"nugget",
										"{{nuggetUid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment for a Nugget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"comment\": \"Cool idea, what will it cost?\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/comment/nugget/{{nuggetUid}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"comment",
										"nugget",
										"{{nuggetUid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Comment for a Nugget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"comment\": \"Cool idea, thank you. Do we know what will it cost?\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/nugget/{{nuggetUid}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"nugget",
										"{{nuggetUid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "NUGGET REACTIONS",
					"item": [
						{
							"name": "Get Reactions for a Nugget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{apiUri}}/reactions/nugget/{{nuggetUid}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"reactions",
										"nugget",
										"{{nuggetUid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create/Update Reaction to a Nugget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reaction\": \"consent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/reactions/nugget/{{nuggetUid}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"reactions",
										"nugget",
										"{{nuggetUid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "REPLIES TO COMMENTS",
					"item": [
						{
							"name": "Get Replies for a Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{apiUri}}/reply/comment/{{commentUid}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"reply",
										"comment",
										"{{commentUid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Reply to a Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reply\": \"I know you are, but what am I?\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/reply/comment/{{commentUid}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"reply",
										"comment",
										"{{commentUid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Reply to a Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "rid",
										"value": "passwordless",
										"type": "text"
									},
									{
										"key": "st-auth-mode",
										"value": "cookie",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reply\": \"I second the proposal\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUri}}/nugget/{{nuggetUid}}",
									"host": [
										"{{apiUri}}"
									],
									"path": [
										"nugget",
										"{{nuggetUid}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}